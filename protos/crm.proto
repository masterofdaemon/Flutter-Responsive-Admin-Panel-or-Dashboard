syntax = "proto3";

package proto;

option go_package = "crm/proto"; // Reverted to simpler path

import "google/protobuf/timestamp.proto"; // Needed for time fields
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";

// --- Enums ---

// Employee roles
enum EmployeeRole {
  EMPLOYEE_ROLE_UNSPECIFIED = 0;
  MANAGER = 1;
  CHIEF_MANAGER = 2;
  DIRECTOR = 3;
  TRANSLATOR = 4;
  ACCOUNTANT = 5;
}

// Status for various entities
enum Status {
  STATUS_UNSPECIFIED = 0;
  DRAFT = 1;
  ACTIVE = 2;
  COMPLETED = 3;
  CANCELLED = 4;
  REJECTED = 5;
  APPROVED = 6;
  PENDING = 7;
}

// Priority for translation orders
enum Priority {
  PRIORITY_UNSPECIFIED = 0;
  NORMAL = 1;
  URGENT = 2; // +100% to translation cost
  SEMI_URGENT = 3; // +50% to translation cost
}

// Registration type for business registration
enum RegistrationType {
  REGISTRATION_TYPE_UNSPECIFIED = 0;
  IP = 1;
  OOO = 2;
}

// Payment method
enum PaymentMethod {
  PAYMENT_METHOD_UNSPECIFIED = 0;
  CASH = 1;
  CARD = 2;
  BANK_TRANSFER = 3;
  OTHER = 4;
}

// Interaction type
enum InteractionType {
  INTERACTION_TYPE_UNSPECIFIED = 0;
  INTERACTION_TYPE_CALL = 1;
  INTERACTION_TYPE_MEETING = 2;
  INTERACTION_TYPE_EMAIL = 3;
  INTERACTION_TYPE_CHAT = 4;
  INTERACTION_TYPE_OTHER = 5;
}

// Document type for translation orders - REMOVED Enum. Field will be string.
// The application should manage an extensive list of document types,
// possibly in a separate table or configuration, to support dropdowns with search.

// Client source
enum ClientSource {
  CLIENT_SOURCE_UNSPECIFIED = 0;
  CLIENT_SOURCE_REFERRAL = 1;
  CLIENT_SOURCE_ONLINE = 2;
  CLIENT_SOURCE_WALK_IN = 3;
  CLIENT_SOURCE_PARTNER = 4;
  CLIENT_SOURCE_OTHER = 5;
}

// Translation Progress Status
enum TranslationProgressStatus {
  TRANSLATION_PROGRESS_STATUS_UNSPECIFIED = 0;
  PENDING_ASSIGNMENT = 1;
  IN_PROGRESS = 2;        // "In Progress"
  TRANSLATED = 3;         // "Translated" (set by translator)
  CHECKED_BY_MANAGER = 4; // "Checked" (set by manager after review)
  CLIENT_NOTIFIED = 5;    // After manager checks and system notifies client
  DELIVERED = 6;          // If physical collection/delivery is tracked
}

// Policy Renewal Status
enum PolicyRenewalStatus {
  POLICY_RENEWAL_STATUS_UNSPECIFIED = 0;
  PENDING_RENEWAL = 1; // Default state, or approaching expiry
  RENEWED = 2;         // Policy has been renewed
  NOT_RENEWED = 3;     // Policy was not renewed (e.g., client declined, or past expiry)
  // Consider adding more specific statuses if needed, e.g., AWAITING_CLIENT_CONFIRMATION
}

// Service Category for Reporting
enum ServiceCategory {
  SERVICE_CATEGORY_UNSPECIFIED = 0;
  LEGAL_SERVICES = 1;
  TRANSLATIONS = 2;
  INSURANCE = 3;
  PROFESSIONAL_DEVELOPMENT = 4;
  ACCOUNT_OPENING = 5;
  BUSINESS_REGISTRATION = 6;
  LENDING = 7;
  ALL_SERVICES = 8; // Option to select all services
}

// Payment Status for Report Items
enum ReportPaymentStatus {
  REPORT_PAYMENT_STATUS_UNSPECIFIED = 0;
  PAID = 1;
  PARTIALLY_PAID = 2;
  UNPAID = 3;
  OVERDUE = 4;
  NOT_APPLICABLE = 5; // For items where payment isn't tracked this way
}

// --- Message Definitions ---

// Client represents a customer in the CRM system.
// All fields are required unless marked as optional.
message Client {
  // Unique identifier for the client (auto-incremented number)
  uint32 client_id = 1;
  // Client's first name (min 2 chars, max 255 chars)
  string first_name = 2;
  // Client's last name (min 2 chars, max 255 chars)
  string last_name = 3;
  // Client's middle name (отчество) - optional for Russian clients
  optional string middle_name = 8;
  // Client's phone number (E.164 format)
  string phone = 4;
  // Client's email address (valid email format)
  optional string email = 5;
  // Client's Telegram ID
  optional int64 telegram_id = 6; // Changed type to int64
  // Client's WhatsApp number (E.164 format)
  optional string whatsapp_number = 7;
  // Client's passport data (stored as JSON)
  optional google.protobuf.Value passport_data = 9;
  // Notes about the client
  optional string notes = 10;
  // Linking client to manager and office as per TS
  optional uint32 manager_id = 11; // ID of the employee (manager)
  optional uint32 office_id = 12;  // ID of the office
}

// User represents a system user with authentication credentials.
// All fields are required unless marked as optional.
message User {
  // Unique identifier for the user (auto-incremented number)
  uint32 user_id = 1;
  // User's login name (min 3 chars, max 100 chars, alphanumeric only)
  string login = 2;
  // PasswordHash is intentionally omitted from proto messages for security
  optional google.protobuf.Timestamp last_login = 3;
  // Notes about the user
  optional string notes = 4;
  optional string email = 5; // Added for explicit email setting
}

message Employee {
  uint32 employee_id = 1;
  uint32 user_id = 2; // Link to User (optional, for legacy)
  string login = 3; // Employee login (unique)
  string name = 4;
  EmployeeRole role = 5;
  uint32 office_id = 6; // Link to Office
  optional int64 telegram_id = 7;
  optional string whatsapp_number = 8;
  string email = 9;
  bool is_active = 10;
  // Notes about the employee
  optional string notes = 11;
  // password_hash is not exposed in API, only used for storage
  // Relationships omitted for brevity
}

message Office {
  uint32 office_id = 1;
  string city = 2;
  optional string address = 3;
  optional string phone = 4;
  // Notes about the office
  optional string notes = 5;
  // Relationships omitted (e.g., list of employee_ids or partner_ids could be added if needed)
}

message LegalCase {
  uint32 case_id = 1;
  uint32 client_id = 2;
  uint32 manager_id = 3; // Employee ID of the manager handling the case
  uint32 issue_type_id = 4;
  optional uint32 partner_id = 5;
  optional google.protobuf.Timestamp consultation_date = 6; // Actual date of consultation
  optional google.protobuf.Timestamp contract_date = 7;
  double contract_amount = 8;
  double expected_commission = 9; // Calculated field
  Status status = 10; // Consider enum
  optional uint32 payment_id = 11;
  // Notes about the legal case
  optional string notes = 12;
  optional google.protobuf.Timestamp consultation_scheduled_date = 13; // New
  optional string consultation_notes = 14; // New
  optional google.protobuf.Timestamp contract_planned_date = 15; // New
}

message TranslationOrder {
  uint32 order_id = 1;
  string title = 2;
  uint32 client_id = 3;
  uint32 manager_id = 4;
  optional uint32 translator_id = 5;
  uint32 office_id = 6;
  // Document type is now a string to support an extensive list managed by the application.
  optional string document_type_key = 7; // e.g., "passport_rf", "birth_certificate_usa"
  optional string source_language = 8;
  optional string target_language = 9;
  optional int32 page_count = 10;
  double translation_sum = 11; // Base translation cost before urgency/certification
  double notarial_sum = 12;    // Manual entry for notarial/legal certification
  double total_sum = 13;       // Calculated: (translation_sum * urgency_multiplier) + notarial_sum
  Priority priority = 14;
  TranslationProgressStatus translation_progress = 15; // Specific status for translation workflow
  optional uint32 payment_id = 16;
  repeated BlankInfo blanks = 17;
  // Notes about the translation order
  optional string notes = 18;
  optional ClientSource source = 19; // MOVED: Source of the client for this order
  // bool is_urgent = 19; // REMOVED - Redundant with Priority enum
  // bool is_semi_urgent = 20; // REMOVED - Redundant with Priority enum
  // client_notified field was here, now covered by TranslationProgressStatus.CLIENT_NOTIFIED
  google.protobuf.Timestamp created_at = 22;
  optional google.protobuf.Timestamp done_at = 23;

  // For handling multiple distinct document types in a single order, consider:
  // repeated DocumentItem document_items = 24;
  // message DocumentItem {
  //   string document_type_key = 1;
  //   int32 page_count = 2;
  //   double item_translation_sum = 3;
  //   // other item-specific fields
  // }
  // If using DocumentItem, fields like document_type_key, page_count, translation_sum above might be deprecated or represent a primary item.

  // Nested message for structured blank info
  message BlankInfo {
    string blank_number = 1; // 6-digit format
    bool is_spoiled = 2;
    string replacement_blank_number = 3; // 6-digit format, optional
  }
}

message InsurancePolicy {
  uint32 policy_id = 1;
  uint32 client_id = 2;
  uint32 manager_id = 3; // Employee ID of the manager
  string policy_number = 4;
  optional string insurance_company_name = 5; // New: Name of the insurance provider
  optional string insurance_line = 6;         // New: e.g., "Auto Insurance", "Property Insurance"
  optional string insurance_product = 7;      // New: e.g., "OSAGO", "KASKO", "Home Basic"
  google.protobuf.Timestamp start_date = 8;
  google.protobuf.Timestamp expiry_date = 9;
  double amount = 10; // Premium amount
  Status status = 11; // Overall status of the policy itself (e.g., ACTIVE, EXPIRED, CANCELLED)
  PolicyRenewalStatus renewal_status = 12; // Tracks the renewal process
  // Notes about the insurance policy
  optional string notes = 13;
}

message TrainingEnrollment {
  uint32 enrollment_id = 1;
  uint32 client_id = 2;
  uint32 manager_id = 3; // Employee ID of the manager
  uint32 course_id = 4;
  optional google.protobuf.Timestamp contract_date = 5;
  Status status = 6; // Consider enum
  optional uint32 payment_id = 7;
  optional string notes = 8;
  bool paid = 9; // Client has paid
  bool accountant_verified = 10; // Accountant verified payment from partner
  double price_at_enrollment = 11;    // New: Price of the course at the time of enrollment
  bool is_contract_signed = 12;       // New: Explicit flag for contract signing
  double agency_commission_amount = 13; // New: Calculated agency commission for this enrollment
}

message AccountOpeningRequest {
  uint32 request_id = 1;
  uint32 client_id = 2;
  uint32 manager_id = 3; // Employee ID of the manager
  uint32 bank_id = 4;
  Status status = 5; // Consider enum
  optional google.protobuf.Timestamp application_date = 6;
  optional google.protobuf.Timestamp opened_date = 7;
  optional uint32 payment_id = 8;
  optional string notes = 9;
  bool agent_commission_received = 10; // Accountant marks "Funds Received"
  double agency_commission_amount_at_request = 11; // Store the commission amount applicable at time of request
}

message BusinessRegistration {
  uint32 request_id = 1;
  uint32 client_id = 2;
  uint32 manager_id = 3;
  uint32 bank_id = 4;
  RegistrationType registration_type = 5;
  Status status = 6;
  optional google.protobuf.Timestamp application_date = 7;
  optional google.protobuf.Timestamp registration_date = 8;
  optional uint32 payment_id = 9;
  optional string notes = 10;
  bool agent_commission_received = 11; // Accountant marks "Funds Received"
  double agency_commission_amount_at_request = 12; // New: Store the commission amount applicable at time of request
}

message LendingApplication {
  uint32 request_id = 1;
  uint32 client_id = 2;
  uint32 manager_id = 3;
  uint32 bank_id = 4;
  double requested_amount = 5;
  optional double approved_amount = 6;
  optional google.protobuf.Timestamp application_date = 7;
  optional google.protobuf.Timestamp approval_date = 8;
  optional google.protobuf.Timestamp funds_received_date = 9;    // Client receives loan
  optional google.protobuf.Timestamp company_contract_date = 10; // Service agreement date with client
  Status status = 11;
  optional uint32 payment_id = 12; // Refers to the payment of company's commission by the client
  optional string notes = 13;
  double company_commission_percent = 14;    // e.g., 7% of loan amount, configurable by Supervisor
  double calculated_commission_amount = 15; // approved_amount * company_commission_percent / 100
  bool commission_paid = 16;                 // Client has paid the company's commission
  RegistrationType entity_type = 17;         // New: Sole Proprietorship (IP) or LLC (OOO)
}

message Partner {
  uint32 partner_id = 1;
  string name = 2;
  optional string city_of_residence = 3;
  optional string contact_info = 4;
  Status status = 5; // Consider enum
  // Notes about the partner
  optional string notes = 6;
  repeated string service_area_cities = 7; // New
  repeated string specialization_issue_type_ids = 8; // New
}

message LegalIssueType {
  uint32 issue_type_id = 1;
  string name = 2;
  optional string description = 3;
  // Notes about the legal issue type
  optional string notes = 4;
}

message TrainingCourse {
  uint32 course_id = 1;
  string name = 2;
  double price = 3;
  double commission_percent = 4; // Required field, must be between 0 and 100
  optional string description = 5;
  // Notes about the training course
  optional string notes = 6;
  optional uint32 parent_course_id = 7; // New: For sub-courses, links to parent TrainingCourse ID
}

// Message for storing translation price list items.
// Service methods would be needed to manage (CRUD) these price lists.
message TranslationPriceListItem {
  uint32 item_id = 1; // Unique ID for the price list item
  uint32 office_id = 2; // Link to Office, for city/office specific pricing
  string document_type_key = 3; // Key matching document types used in TranslationOrder
  double price_per_page = 4;    // Price per page for this document type in this office
  // optional double fixed_price = 5; // Alternative to price_per_page
  string currency_code = 6;     // e.g., "RUB", "USD"
  google.protobuf.Timestamp effective_date = 7; // When this price becomes active
  optional google.protobuf.Timestamp expiry_date = 8;  // When this price is no longer active
}

// Bank message
message Bank {
  uint32 bank_id = 1;
  string name = 2;
  string bic = 3;
  optional string address = 4;
  optional string contact_person = 5;
  optional double account_opening_commission = 6; // Fixed commission amount for opening an account via this bank
  optional string notes = 7;
}

// Interaction message
message Interaction {
  uint32 interaction_id = 1;
  uint32 client_id = 2;
  uint32 manager_id = 3;
  InteractionType type = 4;
  google.protobuf.Timestamp interaction_date = 5;
  string summary = 6; // Min 10 chars, max 1000 chars
  optional string notes = 7;
}

// Payment message
message Payment {
  uint32 payment_id = 1;
  uint32 client_id = 2;
  uint32 related_entity_id = 3; // e.g., CaseID, OrderID, RequestID
  ServiceCategory service_category = 4; // To categorize the payment
  double amount = 5;
  string currency_code = 6; // e.g., "RUB", "USD"
  PaymentMethod payment_method = 7;
  google.protobuf.Timestamp payment_date = 8;
  optional string transaction_reference = 9; // e.g., bank transaction ID
  Status status = 10; // e.g., PENDING, COMPLETED, FAILED
  optional string notes = 11;
}

// --- Reporting Messages ---

message FinancialReportItem {
  uint32 item_id = 1;                 // e.g., LegalCase ID, TranslationOrder ID
  ServiceCategory service_category = 2;
  string item_description = 3;        // e.g., "Legal Consultation - John Doe", "Passport Translation - Jane Smith"
  uint32 client_id = 4;
  string client_name = 5;             // Denormalized for easier display
  uint32 manager_id = 6;
  string manager_name = 7;            // Denormalized for easier display
  google.protobuf.Timestamp item_date = 8; // Relevant date (e.g., contract date, order creation date)
  optional google.protobuf.Timestamp due_date = 9;
  double planned_amount = 10;
  optional double actual_amount_received = 11;
  optional google.protobuf.Timestamp payment_date = 12;
  ReportPaymentStatus payment_status = 13;
  string currency_code = 14;          // e.g., "RUB", "USD"
  optional string notes = 15;           // Any specific notes for this item
}

message GetFinancialReportRequest {
  google.protobuf.Timestamp start_date = 1;
  google.protobuf.Timestamp end_date = 2;
  repeated ServiceCategory service_categories = 3; // Filter by specific categories; if empty, assume all
  optional uint32 manager_id_filter = 4;         // Filter by a specific manager
  optional uint32 client_id_filter = 5;          // Filter by a specific client
  int32 page_size = 6;
  string page_token = 7;
}

message GetFinancialReportResponse {
  double total_planned_amount = 1;
  double total_actual_amount_received = 2;
  int32 total_items = 3;
  repeated FinancialReportItem report_items = 4;
  string next_page_token = 5;
  string currency_code = 6; // Overall currency for the totals
}


// --- Request/Response Messages ---

// Client CRUD
message CreateClientRequest {
  Client client = 1; // ID will likely be ignored/generated by server
  optional int64 telegram_id = 2; // Added
}
message CreateClientResponse {
  uint32 client_id = 1; // Return the generated ID
}

message GetClientRequest {
  uint32 client_id = 1;
}
message GetClientResponse {
  Client client = 1;
}

message UpdateClientRequest {
  uint32 client_id = 1; // ID to identify the client
  Client client_data = 2; // Fields to update (server should handle partial updates)
  optional int64 telegram_id = 3; // Added
}
// Update often returns Empty or the updated resource
message UpdateClientResponse {
  Client client = 1;
}

message DeleteClientRequest {
  uint32 client_id = 1;
}
// Delete often returns Empty
message DeleteClientResponse {
  google.protobuf.Empty response = 1;
}

message ListClientsRequest {
  // Add pagination, filtering fields later if needed
  int32 page_size = 1;
  string page_token = 2; // For pagination
}
message ListClientsResponse {
  repeated Client clients = 1;
  string next_page_token = 2; // For pagination
}


// Employee CRUD (Similar structure)
message CreateEmployeeRequest {
  Employee employee = 1; // ID ignored/generated
  // Might need User info too if creating User simultaneously
  string user_login = 2;
  string user_password = 3; // Handle password securely!
  optional int64 telegram_id = 4; // Added
}
message CreateEmployeeResponse {
  uint32 employee_id = 1;
  uint32 user_id = 2;
}

message GetEmployeeRequest {
  uint32 employee_id = 1;
}
message GetEmployeeResponse {
  Employee employee = 1;
  // Optionally include related User/Office info
}

message UpdateEmployeeRequest {
  uint32 employee_id = 1;
  Employee employee_data = 2; // Fields to update
  // Optionally allow updating related User info
  optional int64 telegram_id = 3; // Added
  optional string password = 4; // Added
}
message UpdateEmployeeResponse {
  Employee employee = 1;
}

message DeleteEmployeeRequest {
  uint32 employee_id = 1;
}
message DeleteEmployeeResponse {
  google.protobuf.Empty response = 1;
}

message ListEmployeesRequest {
  int32 page_size = 1;
  string page_token = 2;
}
message ListEmployeesResponse {
  repeated Employee employees = 1;
  string next_page_token = 2;
}


// --- Service Definition ---

service CrmService {
  // Client Methods
  rpc CreateClient(CreateClientRequest) returns (CreateClientResponse);
  rpc GetClient(GetClientRequest) returns (GetClientResponse);
  rpc UpdateClient(UpdateClientRequest) returns (UpdateClientResponse);
  rpc DeleteClient(DeleteClientRequest) returns (DeleteClientResponse);
  rpc ListClients(ListClientsRequest) returns (ListClientsResponse);

  // Employee Methods
  rpc CreateEmployee(CreateEmployeeRequest) returns (CreateEmployeeResponse);
  rpc GetEmployee(GetEmployeeRequest) returns (GetEmployeeResponse);
  rpc UpdateEmployee(UpdateEmployeeRequest) returns (UpdateEmployeeResponse);
  rpc DeleteEmployee(DeleteEmployeeRequest) returns (DeleteEmployeeResponse);
  rpc ListEmployees(ListEmployeesRequest) returns (ListEmployeesResponse);

  // User Methods (Password handling is NOT done via gRPC for security)
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse); // Only creates user record, password set separately/securely
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse); // Cannot update password via this
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  // Add separate secure methods for password management if needed

  // Office Methods
  rpc CreateOffice(CreateOfficeRequest) returns (CreateOfficeResponse);
  rpc GetOffice(GetOfficeRequest) returns (GetOfficeResponse);
  rpc UpdateOffice(UpdateOfficeRequest) returns (UpdateOfficeResponse);
  rpc DeleteOffice(DeleteOfficeRequest) returns (DeleteOfficeResponse);
  rpc ListOffices(ListOfficesRequest) returns (ListOfficesResponse);

  // LegalCase Methods
  rpc CreateLegalCase(CreateLegalCaseRequest) returns (CreateLegalCaseResponse);
  rpc GetLegalCase(GetLegalCaseRequest) returns (GetLegalCaseResponse);
  rpc UpdateLegalCase(UpdateLegalCaseRequest) returns (UpdateLegalCaseResponse);
  rpc DeleteLegalCase(DeleteLegalCaseRequest) returns (DeleteLegalCaseResponse);
  rpc ListLegalCases(ListLegalCasesRequest) returns (ListLegalCasesResponse);

  // TranslationOrder Methods
  rpc CreateTranslationOrder(CreateTranslationOrderRequest) returns (CreateTranslationOrderResponse);
  rpc GetTranslationOrder(GetTranslationOrderRequest) returns (GetTranslationOrderResponse);
  rpc UpdateTranslationOrder(UpdateTranslationOrderRequest) returns (UpdateTranslationOrderResponse);
  rpc DeleteTranslationOrder(DeleteTranslationOrderRequest) returns (DeleteTranslationOrderResponse);
  rpc ListTranslationOrders(ListTranslationOrdersRequest) returns (ListTranslationOrdersResponse);

  // InsurancePolicy Methods
  rpc CreateInsurancePolicy(CreateInsurancePolicyRequest) returns (CreateInsurancePolicyResponse);
  rpc GetInsurancePolicy(GetInsurancePolicyRequest) returns (GetInsurancePolicyResponse);
  rpc UpdateInsurancePolicy(UpdateInsurancePolicyRequest) returns (UpdateInsurancePolicyResponse);
  rpc DeleteInsurancePolicy(DeleteInsurancePolicyRequest) returns (DeleteInsurancePolicyResponse);
  rpc ListInsurancePolicies(ListInsurancePoliciesRequest) returns (ListInsurancePoliciesResponse);

  // TrainingEnrollment Methods
  rpc CreateTrainingEnrollment(CreateTrainingEnrollmentRequest) returns (CreateTrainingEnrollmentResponse);
  rpc GetTrainingEnrollment(GetTrainingEnrollmentRequest) returns (GetTrainingEnrollmentResponse);
  rpc UpdateTrainingEnrollment(UpdateTrainingEnrollmentRequest) returns (UpdateTrainingEnrollmentResponse);
  rpc DeleteTrainingEnrollment(DeleteTrainingEnrollmentRequest) returns (DeleteTrainingEnrollmentResponse);
  rpc ListTrainingEnrollments(ListTrainingEnrollmentsRequest) returns (ListTrainingEnrollmentsResponse);

  // AccountOpeningRequest Methods
  rpc CreateAccountOpeningRequest(CreateAccountOpeningRequestRequest) returns (CreateAccountOpeningRequestResponse);
  rpc GetAccountOpeningRequest(GetAccountOpeningRequestRequest) returns (GetAccountOpeningRequestResponse);
  rpc UpdateAccountOpeningRequest(UpdateAccountOpeningRequestRequest) returns (UpdateAccountOpeningRequestResponse);
  rpc DeleteAccountOpeningRequest(DeleteAccountOpeningRequestRequest) returns (DeleteAccountOpeningRequestResponse);
  rpc ListAccountOpeningRequests(ListAccountOpeningRequestsRequest) returns (ListAccountOpeningRequestsResponse);

  // BusinessRegistration Methods
  rpc CreateBusinessRegistration(CreateBusinessRegistrationRequest) returns (CreateBusinessRegistrationResponse);
  rpc GetBusinessRegistration(GetBusinessRegistrationRequest) returns (GetBusinessRegistrationResponse);
  rpc UpdateBusinessRegistration(UpdateBusinessRegistrationRequest) returns (UpdateBusinessRegistrationResponse);
  rpc DeleteBusinessRegistration(DeleteBusinessRegistrationRequest) returns (DeleteBusinessRegistrationResponse);
  rpc ListBusinessRegistrations(ListBusinessRegistrationsRequest) returns (ListBusinessRegistrationsResponse);

  // LendingApplication Methods
  rpc CreateLendingApplication(CreateLendingApplicationRequest) returns (CreateLendingApplicationResponse);
  rpc GetLendingApplication(GetLendingApplicationRequest) returns (GetLendingApplicationResponse);
  rpc UpdateLendingApplication(UpdateLendingApplicationRequest) returns (UpdateLendingApplicationResponse);
  rpc DeleteLendingApplication(DeleteLendingApplicationRequest) returns (DeleteLendingApplicationResponse);
  rpc ListLendingApplications(ListLendingApplicationsRequest) returns (ListLendingApplicationsResponse);

  // Partner Methods
  rpc CreatePartner(CreatePartnerRequest) returns (CreatePartnerResponse);
  rpc GetPartner(GetPartnerRequest) returns (GetPartnerResponse);
  rpc UpdatePartner(UpdatePartnerRequest) returns (UpdatePartnerResponse);
  rpc DeletePartner(DeletePartnerRequest) returns (DeletePartnerResponse);
  rpc ListPartners(ListPartnersRequest) returns (ListPartnersResponse);

  // LegalIssueType Methods
  rpc CreateLegalIssueType(CreateLegalIssueTypeRequest) returns (CreateLegalIssueTypeResponse);
  rpc GetLegalIssueType(GetLegalIssueTypeRequest) returns (GetLegalIssueTypeResponse);
  rpc UpdateLegalIssueType(UpdateLegalIssueTypeRequest) returns (UpdateLegalIssueTypeResponse);
  rpc DeleteLegalIssueType(DeleteLegalIssueTypeRequest) returns (DeleteLegalIssueTypeResponse);
  rpc ListLegalIssueTypes(ListLegalIssueTypesRequest) returns (ListLegalIssueTypesResponse);

  // TrainingCourse Methods
  rpc CreateTrainingCourse(CreateTrainingCourseRequest) returns (CreateTrainingCourseResponse);
  rpc GetTrainingCourse(GetTrainingCourseRequest) returns (GetTrainingCourseResponse);
  rpc UpdateTrainingCourse(UpdateTrainingCourseRequest) returns (UpdateTrainingCourseResponse);
  rpc DeleteTrainingCourse(DeleteTrainingCourseRequest) returns (DeleteTrainingCourseResponse);
  rpc ListTrainingCourses(ListTrainingCoursesRequest) returns (ListTrainingCoursesResponse);

  // Bank Methods
  rpc CreateBank(CreateBankRequest) returns (CreateBankResponse);
  rpc GetBank(GetBankRequest) returns (GetBankResponse);
  rpc UpdateBank(UpdateBankRequest) returns (UpdateBankResponse);
  rpc DeleteBank(DeleteBankRequest) returns (DeleteBankResponse);
  rpc ListBanks(ListBanksRequest) returns (ListBanksResponse);

  // Interaction Methods
  rpc CreateInteraction(CreateInteractionRequest) returns (CreateInteractionResponse);
  rpc GetInteraction(GetInteractionRequest) returns (GetInteractionResponse);
  rpc UpdateInteraction(UpdateInteractionRequest) returns (UpdateInteractionResponse);
  rpc DeleteInteraction(DeleteInteractionRequest) returns (DeleteInteractionResponse);
  rpc ListInteractions(ListInteractionsRequest) returns (ListInteractionsResponse);

  // Payment Methods
  rpc CreatePayment(CreatePaymentRequest) returns (CreatePaymentResponse);
  rpc GetPayment(GetPaymentRequest) returns (GetPaymentResponse);
  rpc UpdatePayment(UpdatePaymentRequest) returns (UpdatePaymentResponse);

  // Reporting Methods
  rpc GetFinancialReport(GetFinancialReportRequest) returns (GetFinancialReportResponse);

  // --- Self Profile ---
  rpc GetSelfProfile(GetSelfProfileRequest) returns (GetSelfProfileResponse);
}

// --- CRUD Messages for Added Entities ---

// Self Profile
message GetSelfProfileRequest {}
message GetSelfProfileResponse {
  User user = 1;
  Employee employee = 2;
}

// User (Password handled separately)
message CreateUserRequest { User user = 1; string password = 2; } // Password only for creation, handled securely server-side
message CreateUserResponse { uint32 user_id = 1; }
message GetUserRequest { uint32 user_id = 1; }
message GetUserResponse { User user = 1; }
message UpdateUserRequest { uint32 user_id = 1; User user_data = 2; } // No password update here
message UpdateUserResponse { User user = 1; }
message DeleteUserRequest { uint32 user_id = 1; }
message DeleteUserResponse { google.protobuf.Empty response = 1; }
message ListUsersRequest { int32 page_size = 1; string page_token = 2; }
message ListUsersResponse { repeated User users = 1; string next_page_token = 2; }

// Office
message CreateOfficeRequest { Office office = 1; }
message CreateOfficeResponse { uint32 office_id = 1; }
message GetOfficeRequest { uint32 office_id = 1; }
message GetOfficeResponse { Office office = 1; }
message UpdateOfficeRequest { uint32 office_id = 1; Office office_data = 2; }
message UpdateOfficeResponse { Office office = 1; }
message DeleteOfficeRequest { uint32 office_id = 1; }
message DeleteOfficeResponse { google.protobuf.Empty response = 1; }
message ListOfficesRequest { int32 page_size = 1; string page_token = 2; }
message ListOfficesResponse { repeated Office offices = 1; string next_page_token = 2; }

// LegalCase
message CreateLegalCaseRequest { LegalCase legal_case = 1; }
message CreateLegalCaseResponse { uint32 case_id = 1; }
message GetLegalCaseRequest { uint32 case_id = 1; }
message GetLegalCaseResponse { LegalCase legal_case = 1; }
message UpdateLegalCaseRequest { uint32 case_id = 1; LegalCase case_data = 2; }
message UpdateLegalCaseResponse { LegalCase legal_case = 1; }
message DeleteLegalCaseRequest { uint32 case_id = 1; }
message DeleteLegalCaseResponse { google.protobuf.Empty response = 1; }
message ListLegalCasesRequest { int32 page_size = 1; string page_token = 2; /* Add filters */ }
message ListLegalCasesResponse { repeated LegalCase legal_cases = 1; string next_page_token = 2; }

// TranslationOrder
message CreateTranslationOrderRequest { TranslationOrder translation_order = 1; }
message CreateTranslationOrderResponse { uint32 order_id = 1; }
message GetTranslationOrderRequest { uint32 order_id = 1; }
message GetTranslationOrderResponse { TranslationOrder translation_order = 1; }
message UpdateTranslationOrderRequest { uint32 order_id = 1; TranslationOrder order_data = 2; }
message UpdateTranslationOrderResponse { TranslationOrder translation_order = 1; }
message DeleteTranslationOrderRequest { uint32 order_id = 1; }
message DeleteTranslationOrderResponse { google.protobuf.Empty response = 1; }
message ListTranslationOrdersRequest { int32 page_size = 1; string page_token = 2; /* Add filters */ }
message ListTranslationOrdersResponse { repeated TranslationOrder translation_orders = 1; string next_page_token = 2; }

// InsurancePolicy
message CreateInsurancePolicyRequest { InsurancePolicy insurance_policy = 1; }
message CreateInsurancePolicyResponse { uint32 policy_id = 1; }
message GetInsurancePolicyRequest { uint32 policy_id = 1; }
message GetInsurancePolicyResponse { InsurancePolicy insurance_policy = 1; }
message UpdateInsurancePolicyRequest { uint32 policy_id = 1; InsurancePolicy policy_data = 2; }
message UpdateInsurancePolicyResponse { InsurancePolicy insurance_policy = 1; }
message DeleteInsurancePolicyRequest { uint32 policy_id = 1; }
message DeleteInsurancePolicyResponse { google.protobuf.Empty response = 1; }
message ListInsurancePoliciesRequest { int32 page_size = 1; string page_token = 2; /* Add filters */ }
message ListInsurancePoliciesResponse { repeated InsurancePolicy insurance_policies = 1; string next_page_token = 2; }

// TrainingEnrollment
message CreateTrainingEnrollmentRequest { TrainingEnrollment training_enrollment = 1; }
message CreateTrainingEnrollmentResponse { uint32 enrollment_id = 1; }
message GetTrainingEnrollmentRequest { uint32 enrollment_id = 1; }
message GetTrainingEnrollmentResponse { TrainingEnrollment training_enrollment = 1; }
message UpdateTrainingEnrollmentRequest { uint32 enrollment_id = 1; TrainingEnrollment enrollment_data = 2; }
message UpdateTrainingEnrollmentResponse { TrainingEnrollment training_enrollment = 1; }
message DeleteTrainingEnrollmentRequest { uint32 enrollment_id = 1; }
message DeleteTrainingEnrollmentResponse { google.protobuf.Empty response = 1; }
message ListTrainingEnrollmentsRequest { int32 page_size = 1; string page_token = 2; /* Add filters */ }
message ListTrainingEnrollmentsResponse { repeated TrainingEnrollment training_enrollments = 1; string next_page_token = 2; }

// AccountOpeningRequest
message CreateAccountOpeningRequestRequest { AccountOpeningRequest account_opening_request = 1; }
message CreateAccountOpeningRequestResponse { uint32 request_id = 1; }
message GetAccountOpeningRequestRequest { uint32 request_id = 1; }
message GetAccountOpeningRequestResponse { AccountOpeningRequest account_opening_request = 1; }
message UpdateAccountOpeningRequestRequest { uint32 request_id = 1; AccountOpeningRequest request_data = 2; }
message UpdateAccountOpeningRequestResponse { AccountOpeningRequest account_opening_request = 1; }
message DeleteAccountOpeningRequestRequest { uint32 request_id = 1; }
message DeleteAccountOpeningRequestResponse { google.protobuf.Empty response = 1; }
message ListAccountOpeningRequestsRequest { int32 page_size = 1; string page_token = 2; /* Add filters */ }
message ListAccountOpeningRequestsResponse { repeated AccountOpeningRequest account_opening_requests = 1; string next_page_token = 2; }

// BusinessRegistration
message CreateBusinessRegistrationRequest { BusinessRegistration business_registration = 1; }
message CreateBusinessRegistrationResponse { uint32 request_id = 1; }
message GetBusinessRegistrationRequest { uint32 request_id = 1; }
message GetBusinessRegistrationResponse { BusinessRegistration business_registration = 1; }
message UpdateBusinessRegistrationRequest { uint32 request_id = 1; BusinessRegistration registration_data = 2; }
message UpdateBusinessRegistrationResponse { BusinessRegistration business_registration = 1; }
message DeleteBusinessRegistrationRequest { uint32 request_id = 1; }
message DeleteBusinessRegistrationResponse { google.protobuf.Empty response = 1; }
message ListBusinessRegistrationsRequest { int32 page_size = 1; string page_token = 2; /* Add filters */ }
message ListBusinessRegistrationsResponse { repeated BusinessRegistration business_registrations = 1; string next_page_token = 2; }

// LendingApplication
message CreateLendingApplicationRequest { LendingApplication lending_application = 1; }
message CreateLendingApplicationResponse { uint32 request_id = 1; }
message GetLendingApplicationRequest { uint32 request_id = 1; }
message GetLendingApplicationResponse { LendingApplication lending_application = 1; }
message UpdateLendingApplicationRequest { uint32 request_id = 1; LendingApplication application_data = 2; }
message UpdateLendingApplicationResponse { LendingApplication lending_application = 1; }
message DeleteLendingApplicationRequest { uint32 request_id = 1; }
message DeleteLendingApplicationResponse { google.protobuf.Empty response = 1; }
message ListLendingApplicationsRequest { int32 page_size = 1; string page_token = 2; /* Add filters */ }
message ListLendingApplicationsResponse { repeated LendingApplication lending_applications = 1; string next_page_token = 2; }

// Partner
message CreatePartnerRequest { Partner partner = 1; }
message CreatePartnerResponse { uint32 partner_id = 1; }
message GetPartnerRequest { uint32 partner_id = 1; }
message GetPartnerResponse { Partner partner = 1; }
message UpdatePartnerRequest { uint32 partner_id = 1; Partner partner_data = 2; }
message UpdatePartnerResponse { Partner partner = 1; }
message DeletePartnerRequest { uint32 partner_id = 1; }
message DeletePartnerResponse { google.protobuf.Empty response = 1; }
message ListPartnersRequest { int32 page_size = 1; string page_token = 2; }
message ListPartnersResponse { repeated Partner partners = 1; string next_page_token = 2; }

// LegalIssueType
message CreateLegalIssueTypeRequest { LegalIssueType legal_issue_type = 1; }
message CreateLegalIssueTypeResponse { uint32 issue_type_id = 1; }
message GetLegalIssueTypeRequest { uint32 issue_type_id = 1; }
message GetLegalIssueTypeResponse { LegalIssueType legal_issue_type = 1; }
message UpdateLegalIssueTypeRequest { uint32 issue_type_id = 1; LegalIssueType issue_type_data = 2; }
message UpdateLegalIssueTypeResponse { LegalIssueType legal_issue_type = 1; }
message DeleteLegalIssueTypeRequest { uint32 issue_type_id = 1; }
message DeleteLegalIssueTypeResponse { google.protobuf.Empty response = 1; }
message ListLegalIssueTypesRequest { int32 page_size = 1; string page_token = 2; }
message ListLegalIssueTypesResponse { repeated LegalIssueType legal_issue_types = 1; string next_page_token = 2; }

// TrainingCourse
message CreateTrainingCourseRequest { TrainingCourse training_course = 1; }
message CreateTrainingCourseResponse { uint32 course_id = 1; }
message GetTrainingCourseRequest { uint32 course_id = 1; }
message GetTrainingCourseResponse { TrainingCourse training_course = 1; }
message UpdateTrainingCourseRequest { uint32 course_id = 1; TrainingCourse course_data = 2; }
message UpdateTrainingCourseResponse { TrainingCourse training_course = 1; }
message DeleteTrainingCourseRequest { uint32 course_id = 1; }
message DeleteTrainingCourseResponse { google.protobuf.Empty response = 1; }
message ListTrainingCoursesRequest { int32 page_size = 1; string page_token = 2; }
message ListTrainingCoursesResponse { repeated TrainingCourse training_courses = 1; string next_page_token = 2; }

// Bank
message CreateBankRequest { Bank bank = 1; }
message CreateBankResponse { uint32 bank_id = 1; }
message GetBankRequest { uint32 bank_id = 1; }
message GetBankResponse { Bank bank = 1; }
message UpdateBankRequest { uint32 bank_id = 1; Bank bank_data = 2; }
message UpdateBankResponse { Bank bank = 1; }
message DeleteBankRequest { uint32 bank_id = 1; }
message DeleteBankResponse { google.protobuf.Empty response = 1; }
message ListBanksRequest { int32 page_size = 1; string page_token = 2; }
message ListBanksResponse { repeated Bank banks = 1; string next_page_token = 2; }

// Interaction
message CreateInteractionRequest { Interaction interaction = 1; }
message CreateInteractionResponse { uint32 interaction_id = 1; }
message GetInteractionRequest { uint32 interaction_id = 1; }
message GetInteractionResponse { Interaction interaction = 1; }
message UpdateInteractionRequest { uint32 interaction_id = 1; Interaction interaction_data = 2; }
message UpdateInteractionResponse { Interaction interaction = 1; }
message DeleteInteractionRequest { uint32 interaction_id = 1; }
message DeleteInteractionResponse { google.protobuf.Empty response = 1; }
message ListInteractionsRequest { int32 page_size = 1; string page_token = 2; /* Add filters */ }
message ListInteractionsResponse { repeated Interaction interactions = 1; string next_page_token = 2; }

// Payment
message CreatePaymentRequest { Payment payment = 1; }
message CreatePaymentResponse { uint32 payment_id = 1; }
message GetPaymentRequest { uint32 payment_id = 1; }
message GetPaymentResponse { Payment payment = 1; }
message UpdatePaymentRequest { uint32 payment_id = 1; Payment payment_data = 2; }
message UpdatePaymentResponse { Payment payment = 1; }
message DeletePaymentRequest { uint32 payment_id = 1; }
message DeletePaymentResponse { google.protobuf.Empty response = 1; }
message ListPaymentsRequest { int32 page_size = 1; string page_token = 2; /* Add filters */ }
message ListPaymentsResponse { repeated Payment payments = 1; string next_page_token = 2; }

// --- Auth Messages ---
message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
}

message LoginEmployeeRequest {
  string login = 1;
  string password = 2;
}

message LoginEmployeeResponse {
  string token = 1;
  Employee employee = 2;
}

// --- Authentication Service ---
service AuthService {
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc LoginEmployee(LoginEmployeeRequest) returns (LoginEmployeeResponse);
}
